from datetime import datetime
from typing import List, Dict, Any

class ReportGenerator:
    """Generate comprehensive medical diagnosis reports."""
    
    def __init__(self):
        self.report_template = """
MEDICAL DIAGNOSIS ASSISTANT REPORT
Generated on: {timestamp}

================================================================================
PATIENT PHENOTYPE DESCRIPTION
================================================================================
{phenotype_description}

================================================================================
DIAGNOSIS SUGGESTIONS
================================================================================
{diagnosis_suggestions}

================================================================================
IMAGE ANALYSIS
================================================================================
{image_analysis}

================================================================================
REFERENCE DOCUMENT ANALYSIS
================================================================================
{document_analysis}

================================================================================
RECOMMENDATIONS
================================================================================
{recommendations}

================================================================================
DISCLAIMER
================================================================================
This report is generated by an automated medical diagnosis assistant tool and 
is intended for educational and research purposes only. This should NOT be used 
as a substitute for professional medical advice, diagnosis, or treatment. 

Always consult with qualified healthcare professionals for:
- Clinical diagnosis and treatment decisions
- Interpretation of medical findings
- Patient care recommendations
- Genetic counseling and testing

The accuracy of suggestions depends on the quality and relevance of the 
reference documents provided. This tool performs text-based analysis and 
cannot replace clinical judgment or specialized medical testing.

================================================================================
"""
    
    def generate_comprehensive_report(self, phenotype_description: str, 
                                    diagnosis_suggestions: List[Dict[str, Any]], 
                                    image_analysis: List[str], 
                                    pdf_text: str) -> str:
        """
        Generate a comprehensive medical diagnosis report.
        
        Args:
            phenotype_description (str): Patient phenotype description
            diagnosis_suggestions (List[Dict]): List of diagnosis suggestions
            image_analysis (List[str]): List of image analysis results
            pdf_text (str): Source PDF text content
            
        Returns:
            str: Formatted report
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Format diagnosis suggestions
        diagnosis_text = self._format_diagnosis_suggestions(diagnosis_suggestions)
        
        # Format image analysis
        image_text = self._format_image_analysis(image_analysis)
        
        # Generate document analysis
        document_analysis = self._generate_document_analysis(pdf_text)
        
        # Generate recommendations
        recommendations = self._generate_recommendations(diagnosis_suggestions, phenotype_description)
        
        # Fill template
        report = self.report_template.format(
            timestamp=timestamp,
            phenotype_description=phenotype_description,
            diagnosis_suggestions=diagnosis_text,
            image_analysis=image_text,
            document_analysis=document_analysis,
            recommendations=recommendations
        )
        
        return report
    
    def _format_diagnosis_suggestions(self, suggestions: List[Dict[str, Any]]) -> str:
        """Format diagnosis suggestions for report."""
        if not suggestions:
            return "No specific diagnosis suggestions found based on the provided phenotype description and reference document."
        
        formatted = []
        for i, suggestion in enumerate(suggestions, 1):
            formatted.append(f"""
{i}. {suggestion['condition']}
   Confidence Level: {suggestion['confidence']}
   Matching Features: {', '.join(suggestion['matching_features'])}
   Evidence from Literature: {suggestion['evidence']}
   Additional Information: {suggestion['additional_info']}
""")
        
        return '\n'.join(formatted)
    
    def _format_image_analysis(self, image_analyses: List[str]) -> str:
        """Format image analysis for report."""
        if not image_analyses:
            return "No images were found in the reference document for analysis."
        
        formatted = []
        for i, analysis in enumerate(image_analyses, 1):
            formatted.append(f"Image {i}:\n{analysis}\n")
        
        return '\n'.join(formatted)
    
    def _generate_document_analysis(self, pdf_text: str) -> str:
        """Generate analysis of the reference document."""
        word_count = len(pdf_text.split())
        char_count = len(pdf_text)
        
        # Extract key topics
        key_topics = self._extract_key_topics(pdf_text)
        
        analysis = f"""
Document Statistics:
- Total characters: {char_count:,}
- Total words: {word_count:,}
- Estimated reading time: {max(1, word_count // 200)} minutes

Key Topics Identified:
{key_topics}

Document Type: Medical literature/research paper focusing on genetic and clinical aspects of craniosynostosis and related conditions.
"""
        
        return analysis
    
    def _extract_key_topics(self, text: str) -> str:
        """Extract key topics from the document."""
        text_lower = text.lower()
        
        topics = []
        
        # Define topic keywords
        topic_keywords = {
            "Craniosynostosis": ["craniosynostosis", "synostosis", "suture fusion"],
            "Genetics": ["gene", "mutation", "chromosome", "FGFR", "genetic"],
            "Syndromes": ["syndrome", "muenke", "apert", "crouzon"],
            "Clinical Features": ["phenotype", "developmental", "facial", "skeletal"],
            "Diagnosis": ["diagnosis", "clinical", "assessment", "evaluation"],
            "Treatment": ["treatment", "surgery", "management", "therapy"]
        }
        
        for topic, keywords in topic_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                topics.append(f"- {topic}")
        
        return '\n'.join(topics) if topics else "- General medical content"
    
    def _generate_recommendations(self, suggestions: List[Dict[str, Any]], 
                                phenotype_description: str) -> str:
        """Generate clinical recommendations based on analysis."""
        
        recommendations = [
            "1. CLINICAL EVALUATION:",
            "   - Comprehensive clinical examination by a medical geneticist",
            "   - Detailed family history and pedigree analysis",
            "   - Growth and developmental assessment",
            "",
            "2. DIAGNOSTIC TESTING:",
            "   - Consider genetic testing if syndromic features are present",
            "   - Imaging studies (CT/MRI) for structural assessment",
            "   - Ophthalmologic evaluation",
            "   - Hearing assessment",
            "",
            "3. DIFFERENTIAL DIAGNOSIS:",
        ]
        
        if suggestions:
            recommendations.append("   Based on the analysis, consider evaluation for:")
            for suggestion in suggestions[:3]:  # Top 3 suggestions
                recommendations.append(f"   - {suggestion['condition']}")
        else:
            recommendations.append("   - Systematic evaluation of craniosynostosis causes")
            recommendations.append("   - Assessment for syndromic vs. nonsyndromic presentation")
        
        recommendations.extend([
            "",
            "4. MULTIDISCIPLINARY CARE:",
            "   - Neurosurgery consultation if indicated",
            "   - Plastic surgery evaluation for reconstruction",
            "   - Developmental pediatrics assessment",
            "   - Genetic counseling for family planning",
            "",
            "5. FOLLOW-UP:",
            "   - Regular monitoring of growth and development",
            "   - Surveillance for complications (increased ICP, vision problems)",
            "   - Family education and support resources"
        ])
        
        return '\n'.join(recommendations)
    
    def generate_summary_report(self, phenotype_description: str, 
                              diagnosis_suggestions: List[Dict[str, Any]]) -> str:
        """Generate a brief summary report."""
        
        summary = f"""
MEDICAL DIAGNOSIS ASSISTANT - SUMMARY REPORT
Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

PHENOTYPE: {phenotype_description}

TOP SUGGESTIONS:
"""
        
        if diagnosis_suggestions:
            for i, suggestion in enumerate(diagnosis_suggestions[:3], 1):
                summary += f"{i}. {suggestion['condition']} ({suggestion['confidence']})\n"
        else:
            summary += "No specific suggestions identified.\n"
        
        summary += "\n⚠️  DISCLAIMER: For educational use only. Consult healthcare professionals for medical decisions."
        
        return summary
